IDEAL
MODEL small
STACK 100h
DATASEG

    ; messages arrays
    spikes_message_x_array DW 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14
                           DW 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39
                           DW 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44
                           DW 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74
                           DW 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84
                           DW 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99
                           DW 100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 113, 113, 113, 113, 113, 114, 114, 114, 114, 114, 110, 110, 110, 110, 110, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 113, 113, 113, 113, 113, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 119, 119, 119, 119, 119
                           DW 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 119, 119, 119, 119, 119, 130, 130, 130, 130, 130, 131, 131, 131, 131, 131, 132, 132, 132, 132, 132, 133, 133, 133, 133, 133, 134, 134, 134, 134, 134, 130, 130, 130, 130, 130, 131, 131, 131, 131, 131, 132, 132, 132, 132, 132, 133, 133, 133, 133, 133, 134, 134, 134, 134, 134, 130, 130, 130, 130, 130, 131, 131, 131, 131, 131, 132, 132, 132, 132, 132, 133, 133, 133, 133, 133, 134, 134, 134, 134, 134, 130, 130, 130, 130, 130, 131, 131, 131, 131, 131, 132, 132, 132, 132, 132, 133, 133, 133, 133, 133, 134, 134, 134, 134, 134, 130, 130, 130, 130, 130, 131, 131, 131, 131, 131, 132, 132, 132, 132, 132, 133, 133, 133, 133, 133, 134, 134, 134, 134, 134
                           DW 130, 130, 130, 130, 130, 131, 131, 131, 131, 131, 132, 132, 132, 132, 132, 133, 133, 133, 133, 133, 134, 134, 134, 134, 134, 130, 130, 130, 130, 130, 131, 131, 131, 131, 131, 132, 132, 132, 132, 132, 133, 133, 133, 133, 133, 134, 134, 134, 134, 134, 135, 135, 135, 135, 135, 136, 136, 136, 136, 136, 137, 137, 137, 137, 137, 138, 138, 138, 138, 138, 139, 139, 139, 139, 139, 135, 135, 135, 135, 135, 136, 136, 136, 136, 136, 137, 137, 137, 137, 137, 138, 138, 138, 138, 138, 139, 139, 139, 139, 139, 135, 135, 135, 135, 135, 136, 136, 136, 136, 136, 137, 137, 137, 137, 137, 138, 138, 138, 138, 138, 139, 139, 139, 139, 139, 140, 140, 140, 140, 140, 141, 141, 141, 141, 141, 142, 142, 142, 142, 142, 143, 143, 143, 143, 143, 144, 144, 144, 144, 144
                           DW 140, 140, 140, 140, 140, 141, 141, 141, 141, 141, 142, 142, 142, 142, 142, 143, 143, 143, 143, 143, 144, 144, 144, 144, 144, 140, 140, 140, 140, 140, 141, 141, 141, 141, 141, 142, 142, 142, 142, 142, 143, 143, 143, 143, 143, 144, 144, 144, 144, 144, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 147, 147, 147, 147, 147, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 147, 147, 147, 147, 147, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 147, 147, 147, 147, 147, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 150, 150, 150, 150, 150, 151, 151, 151, 151, 151, 152, 152, 152, 152, 152, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154
                           DW 150, 150, 150, 150, 150, 151, 151, 151, 151, 151, 152, 152, 152, 152, 152, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154, 165, 165, 165, 165, 165, 166, 166, 166, 166, 166, 167, 167, 167, 167, 167, 168, 168, 168, 168, 168, 169, 169, 169, 169, 169, 165, 165, 165, 165, 165, 166, 166, 166, 166, 166, 167, 167, 167, 167, 167, 168, 168, 168, 168, 168, 169, 169, 169, 169, 169, 165, 165, 165, 165, 165, 166, 166, 166, 166, 166, 167, 167, 167, 167, 167, 168, 168, 168, 168, 168, 169, 169, 169, 169, 169, 170, 170, 170, 170, 170, 171, 171, 171, 171, 171, 172, 172, 172, 172, 172, 173, 173, 173, 173, 173, 174, 174, 174, 174, 174, 170, 170, 170, 170, 170, 171, 171, 171, 171, 171, 172, 172, 172, 172, 172, 173, 173, 173, 173, 173, 174, 174, 174, 174, 174
                           DW 170, 170, 170, 170, 170, 171, 171, 171, 171, 171, 172, 172, 172, 172, 172, 173, 173, 173, 173, 173, 174, 174, 174, 174, 174, 175, 175, 175, 175, 175, 176, 176, 176, 176, 176, 177, 177, 177, 177, 177, 178, 178, 178, 178, 178, 179, 179, 179, 179, 179, 175, 175, 175, 175, 175, 176, 176, 176, 176, 176, 177, 177, 177, 177, 177, 178, 178, 178, 178, 178, 179, 179, 179, 179, 179, 175, 175, 175, 175, 175, 176, 176, 176, 176, 176, 177, 177, 177, 177, 177, 178, 178, 178, 178, 178, 179, 179, 179, 179, 179, 180, 180, 180, 180, 180, 181, 181, 181, 181, 181, 182, 182, 182, 182, 182, 183, 183, 183, 183, 183, 184, 184, 184, 184, 184, 180, 180, 180, 180, 180, 181, 181, 181, 181, 181, 182, 182, 182, 182, 182, 183, 183, 183, 183, 183, 184, 184, 184, 184, 184
                           DW 180, 180, 180, 180, 180, 181, 181, 181, 181, 181, 182, 182, 182, 182, 182, 183, 183, 183, 183, 183, 184, 184, 184, 184, 184, 185, 185, 185, 185, 185, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 188, 188, 188, 188, 188, 189, 189, 189, 189, 189, 185, 185, 185, 185, 185, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 188, 188, 188, 188, 188, 189, 189, 189, 189, 189, 185, 185, 185, 185, 185, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 188, 188, 188, 188, 188, 189, 189, 189, 189, 189
    spikes_message_y_array DW 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19
                           DW 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4
                           DW 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19
                           DW 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34
                           DW 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4
                           DW 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34
                           DW 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4
                           DW 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24
                           DW 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4
                           DW 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4
                           DW 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 10, 11, 12, 13, 14, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19
                           DW 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19, 15, 16, 17, 18, 19
                           DW 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 30, 31, 32, 33, 34, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29, 25, 26, 27, 28, 29
   
    high_message_x_array DW 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 21, 21, 21, 22, 22, 22, 23, 23, 23, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 24, 24, 24, 25, 25, 25, 26, 26, 26, 24, 24, 24, 25, 25, 25, 26, 26, 26, 24, 24
                         DW 24, 25, 25, 25, 26, 26, 26, 24, 24, 24, 25, 25, 25, 26, 26, 26, 24, 24, 24, 25, 25, 25, 26, 26, 26, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 27, 27, 27, 28, 28, 28, 29, 29, 29, 36, 36, 36, 37, 37, 37, 38, 38, 38, 36, 36, 36, 37, 37, 37, 38, 38, 38, 36, 36, 36, 37, 37, 37, 38, 38, 38, 36, 36, 36, 37, 37, 37, 38, 38, 38, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 47, 45, 45, 45, 46, 46, 46, 47, 47, 47, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 48, 48, 48, 49, 49, 49, 50, 50, 50, 48, 48, 48, 49, 49, 49, 50, 50, 50, 57, 57, 57, 58, 58, 58, 59, 59, 59, 57, 57, 57, 58
                         DW 58, 58, 59, 59, 59, 57, 57, 57, 58, 58, 58, 59, 59, 59, 57, 57, 57, 58, 58, 58, 59, 59, 59, 57, 57, 57, 58, 58, 58, 59, 59, 59, 57, 57, 57, 58, 58, 58, 59, 59, 59, 57, 57, 57, 58, 58, 58, 59, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 65, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 68, 69, 69, 69, 70, 70, 70, 71, 71, 71, 69, 69, 69, 70, 70, 70, 71, 71, 71, 69, 69, 69, 70, 70, 70, 71, 71, 71, 69, 69, 69, 70, 70, 70, 71, 71, 71, 69, 69, 69, 70, 70, 70, 71, 71, 71, 69, 69, 69, 70, 70, 70, 71, 71, 71, 69, 69, 69, 70, 70, 70, 71, 71, 71
    high_message_y_array DW 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 9, 10, 11, 9, 10, 11, 9, 10, 11, 9, 10, 11, 9, 10, 11, 9, 10, 11, 9, 10, 11, 9, 10, 11, 9, 10, 11, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10
                         DW 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 18, 19, 20, 18, 19, 20, 18, 19, 20, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 0, 1, 2, 0, 1, 2, 0, 1, 2, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 12, 13, 14, 12, 13, 14, 12, 13, 14, 18, 19, 20, 18, 19, 20, 18, 19, 20, 3, 4, 5, 3, 4, 5, 3, 4, 5, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3
                         DW 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 9, 10, 11, 9, 10, 11, 9, 10, 11, 9, 10, 11, 9, 10, 11, 9, 10, 11, 9, 10, 11, 9, 10, 11, 9, 10, 11, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20

    close_x_array_x DW 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14
    close_x_array_y DW 0, 1, 2, 0, 1, 2, 0, 1, 2, 12, 13, 14, 12, 13, 14, 12, 13, 14, 3, 4, 5, 3, 4, 5, 3, 4, 5, 9, 10, 11, 9, 10, 11, 9, 10, 11, 6, 7, 8, 6, 7, 8, 6, 7, 8, 3, 4, 5, 3, 4, 5, 3, 4, 5, 9, 10, 11, 9, 10, 11, 9, 10, 11, 0, 1, 2, 0, 1, 2, 0, 1, 2, 12, 13, 14, 12, 13, 14, 12, 13, 14

    start_message_x_array DW 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17
                          DW 18, 18, 18, 18, 19, 19, 19, 19, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43
                          DW 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63, 60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63, 64, 64, 64, 64, 65, 65, 65, 65, 66, 66, 66, 66, 67, 67, 67, 67, 64, 64, 64, 64, 65, 65, 65, 65, 66, 66, 66, 66, 67, 67, 67, 67, 68, 68, 68, 68, 69, 69, 69, 69, 70, 70, 70, 70, 71, 71, 71, 71, 68, 68, 68, 68, 69, 69, 69, 69
                          DW 70, 70, 70, 70, 71, 71, 71, 71, 72, 72, 72, 72, 73, 73, 73, 73, 74, 74, 74, 74, 75, 75, 75, 75, 72, 72, 72, 72, 73, 73, 73, 73, 74, 74, 74, 74, 75, 75, 75, 75, 72, 72, 72, 72, 73, 73, 73, 73, 74, 74, 74, 74, 75, 75, 75, 75, 72, 72, 72, 72, 73, 73, 73, 73, 74, 74, 74, 74, 75, 75, 75, 75, 72, 72, 72, 72, 73, 73, 73, 73, 74, 74, 74, 74, 75, 75, 75, 75, 72, 72, 72, 72, 73, 73, 73, 73, 74, 74, 74, 74, 75, 75, 75, 75, 72, 72, 72, 72, 73, 73, 73, 73, 74, 74, 74, 74, 75, 75, 75, 75, 84, 84, 84, 84, 85, 85, 85, 85, 86, 86, 86, 86, 87, 87, 87, 87, 84, 84, 84, 84, 85, 85, 85, 85, 86, 86, 86, 86, 87, 87, 87, 87, 84, 84, 84, 84, 85, 85, 85, 85, 86, 86, 86, 86, 87, 87, 87, 87, 84, 84, 84, 84, 85, 85, 85, 85, 86, 86, 86, 86, 87, 87, 87, 87, 84, 84, 84, 84, 85, 85, 85, 85, 86, 86, 86, 86, 87, 87, 87, 87
                          DW 84, 84, 84, 84, 85, 85, 85, 85, 86, 86, 86, 86, 87, 87, 87, 87, 84, 84, 84, 84, 85, 85, 85, 85, 86, 86, 86, 86, 87, 87, 87, 87, 88, 88, 88, 88, 89, 89, 89, 89, 90, 90, 90, 90, 91, 91, 91, 91, 88, 88, 88, 88, 89, 89, 89, 89, 90, 90, 90, 90, 91, 91, 91, 91, 92, 92, 92, 92, 93, 93, 93, 93, 94, 94, 94, 94, 95, 95, 95, 95, 92, 92, 92, 92, 93, 93, 93, 93, 94, 94, 94, 94, 95, 95, 95, 95, 96, 96, 96, 96, 97, 97, 97, 97, 98, 98, 98, 98, 99, 99, 99, 99, 96, 96, 96, 96, 97, 97, 97, 97, 98, 98, 98, 98, 99, 99, 99, 99, 100, 100, 100, 100, 101, 101, 101, 101, 102, 102, 102, 102, 103, 103, 103, 103, 100, 100, 100, 100, 101, 101, 101, 101, 102, 102, 102, 102, 103, 103, 103, 103, 100, 100, 100, 100, 101, 101, 101, 101, 102, 102, 102, 102, 103, 103, 103, 103, 100, 100, 100, 100, 101, 101, 101, 101, 102, 102, 102, 102, 103, 103, 103, 103, 100, 100, 100, 100, 101, 101, 101, 101
                          DW 102, 102, 102, 102, 103, 103, 103, 103, 112, 112, 112, 112, 113, 113, 113, 113, 114, 114, 114, 114, 115, 115, 115, 115, 116, 116, 116, 116, 117, 117, 117, 117, 118, 118, 118, 118, 119, 119, 119, 119, 120, 120, 120, 120, 121, 121, 121, 121, 122, 122, 122, 122, 123, 123, 123, 123, 120, 120, 120, 120, 121, 121, 121, 121, 122, 122, 122, 122, 123, 123, 123, 123, 120, 120, 120, 120, 121, 121, 121, 121, 122, 122, 122, 122, 123, 123, 123, 123, 120, 120, 120, 120, 121, 121, 121, 121, 122, 122, 122, 122, 123, 123, 123, 123, 120, 120, 120, 120, 121, 121, 121, 121, 122, 122, 122, 122, 123, 123, 123, 123, 120, 120, 120, 120, 121, 121, 121, 121, 122, 122, 122, 122, 123, 123, 123, 123, 120, 120, 120, 120, 121, 121, 121, 121, 122, 122, 122, 122, 123, 123, 123, 123, 124, 124, 124, 124, 125, 125, 125, 125, 126, 126, 126, 126, 127, 127, 127, 127, 128, 128, 128, 128, 129, 129, 129, 129, 130, 130, 130, 130, 131, 131, 131, 131
    start_message_y_array DW 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 4, 5, 6, 7, 4, 5, 6, 7
                          DW 4, 5, 6, 7, 4, 5, 6, 7, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3
                          DW 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 12, 13, 14, 15, 12, 13, 14, 15
                          DW 12, 13, 14, 15, 12, 13, 14, 15, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19
                          DW 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 24, 25, 26, 27, 24, 25, 26, 27
                          DW 24, 25, 26, 27, 24, 25, 26, 27, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3


    ; number arrays
    num_0_x_array DW 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17
    num_0_y_array DW 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17
    num_0_p_amount DW 252

    num_1_x_array DW 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14
    num_1_y_array DW 3, 4, 5, 3, 4, 5, 3, 4, 5, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 18, 19, 20, 18, 19, 20, 18, 19, 20
    num_1_p_amount DW 153

    num_2_x_array DW 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17
    num_2_y_array DW 3, 4, 5, 3, 4, 5, 3, 4, 5, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 9, 10, 11, 9, 10, 11, 9, 10, 11, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 18, 19, 20, 18, 19, 20, 18, 19, 20, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 18, 19, 20, 18, 19, 20, 18, 19, 20
    num_2_p_amount DW 207

    num_3_x_array DW 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17
    num_3_y_array DW 3, 4, 5, 3, 4, 5, 3, 4, 5, 15, 16, 17, 15, 16, 17, 15, 16, 17, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 9, 10, 11, 9, 10, 11, 9, 10, 11, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 9, 10, 11, 9, 10, 11, 9, 10, 11, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17
    num_3_p_amount DW 207

    num_4_x_array DW 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17
    num_4_y_array DW 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 12, 13, 14, 12, 13, 14, 12, 13, 14, 12, 13, 14, 12, 13, 14, 12, 13, 14, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20
    num_4_p_amount DW 225

    num_5_x_array DW 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17
    num_5_y_array DW 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 15, 16, 17, 15, 16, 17, 15, 16, 17, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 6, 7, 8, 6, 7, 8, 6, 7, 8, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 6, 7, 8, 6, 7, 8, 6, 7, 8, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17
    num_5_p_amount DW 225

    num_6_x_array DW 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17
    num_6_y_array DW 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 9, 10, 11, 9, 10, 11, 9, 10, 11, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 9, 10, 11, 9, 10, 11, 9, 10, 11, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 3, 4, 5, 3, 4, 5, 3, 4, 5, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17
    num_6_p_amount DW 243

    num_7_x_array DW 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17
    num_7_y_array DW 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5
    num_7_p_amount DW 162

    num_8_x_array DW 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17
    num_8_y_array DW 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 9, 10, 11, 9, 10, 11, 9, 10, 11, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 9, 10, 11, 9, 10, 11, 9, 10, 11, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17
    num_8_p_amount DW 252

    num_9_x_array DW 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17, 15, 15, 15, 16, 16, 16, 17, 17, 17
    num_9_y_array DW 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 15, 16, 17, 15, 16, 17, 15, 16, 17, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 9, 10, 11, 9, 10, 11, 9, 10, 11, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 9, 10, 11, 9, 10, 11, 9, 10, 11, 18, 19, 20, 18, 19, 20, 18, 19, 20, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17, 18, 19, 20, 18, 19, 20, 18, 19, 20, 3, 4, 5, 3, 4, 5, 3, 4, 5, 6, 7, 8, 6, 7, 8, 6, 7, 8, 9, 10, 11, 9, 10, 11, 9, 10, 11, 12, 13, 14, 12, 13, 14, 12, 13, 14, 15, 16, 17, 15, 16, 17, 15, 16, 17
    num_9_p_amount DW 243

    nums_x_arrays_offset DW 10 DUP(0)
    nums_y_arrays_offset DW 10 DUP(0)
    nums_p_amounts DW 10 DUP(0)

    ; colors
    background_color DW 3

    ; bird info
    bird_facing_right_array_x DW 4, 10,13, 12, 11, 3, 2, 1, 0, 14, 13, 12, 11, 7, 6, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 11, 10, 9, 8, 7, 6, 5, 4, 3, 10, 9, 8, 7, 6, 5
    bird_facing_right_boarder_array_x DW 4, 10,13, 12, 11, 3, 2, 1, 0, 14, 7, 6, 5, 0, 15, 9, 8, 7, 0, 17, 16, 13, 9, 0, 18, 1, 17, 16, 15, 14, 1, 13, 12, 5, 4, 3, 2, 12, 3, 2, 12, 1, 12, 1, 11, 2, 11, 4, 3, 10, 9, 8, 7, 6, 5
    bird_facing_left_array_x DW 14, 8, 5, 6, 7,15,16,17,18, 4, 5, 6, 7,11,12,13,14,15,16,17,18, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17, 5, 6, 7, 8, 9,10,11,12,13,14,15,16, 6, 7, 8, 9,10,11,12,13,14,15,16, 6, 7, 8, 9,10,11,12,13,14,15,16,17, 6, 7, 8, 9,10,11,12,13,14,15,16,17, 7, 8, 9,10,11,12,13,14,15,16, 7, 8, 9,10,11,12,13,14,15, 8, 9,10,11,12,13
    bird_facing_left_boarder_array_x DW 14, 8, 5, 6, 7, 15, 16, 17, 18, 4, 11, 12, 13, 18, 3, 9, 10, 11, 18, 1, 2, 5, 9, 18, 0, 17, 1, 2, 3, 4, 17, 5, 6, 13, 14, 15, 16, 6, 15, 16, 6, 17, 6, 17, 7, 16, 7, 14, 15, 8, 9, 10, 11, 12, 13
    bird_array_y DW 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12
    bird_boarder_array_y DW 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12
    bird_array_c DW 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15, 0, 0, 0,15,15,15,15, 0, 0,15,15,15,15,15, 0, 0, 0,15,15,15,15,15, 3, 0, 0, 0, 6,15, 0,15,15,15, 0,15,15,15,15,15,15, 3, 3, 0, 0, 6, 6, 6,15,15,15,15,15,15,15,15,15,15, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3,15,15,15,15, 3, 3, 3, 3, 3, 3, 0, 0, 0,15,15,15,15,15, 3, 0, 0, 0, 0, 0,15,15,15,15,15,15,15,15, 0, 0, 0, 3,15,15,15,15,15,15,15,15,15, 0, 0, 3, 3,15,15,15,15,15,15, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0
    bird_p_amount DW 162
    bird_x DW 156
    bird_y DW 90
    slope DW 14
    bird_direction DB 'r'
    ticks_amount DW 3800 ; how long the game tick is

    ; score
    score DB 0
    score_digit DB 0
    score_tens DB 0

    high_score DB 0
    high_score_digit DB 0
    high_score_tens DB 0

    ; spikes info
    spike_color DW 11
    spike_facing_left_array_x DW 4, 3, 4, 3, 2, 1, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 4, 3, 2, 1, 4, 3
    spike_facing_right_array_x DW 0, 1, 0, 1, 2, 3, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1
    spike_array_y DW 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5
    spike_p_amount DW 22

    ; wall info
    right_wall_place DW 225
    spikes_place_right DW 220
    left_wall_place DW 94
    spikes_place_left DW 95
    wall_ran1 DW 0
    wall_ran2 DW 0
    wall_ran1_xor DW 09877
    wall_ran2_xor DW 32144
    Timer DB -1
    streak DW 0
    High_streak DW 0
    min_streak DW 7




CODESEG


proc find_next_bird_coords
    ; push the registers we'll use
    push ax
    push dx
    mov ax, [bird_x]
    mov ax, [bird_y]

    dec [slope] ; decrease the slope
    cmp [bird_direction], 'r' ; check direction
    jne go_left
go_right:
    inc [bird_x]
    jmp continue_calculating
go_left:
    dec [bird_x]
continue_calculating:
    mov ax, [bird_y]
    mov dx, [slope]
    shr dx, 2 ; create better movement
    sub ax, dx
    mov [bird_y], ax ; insert new y into bird_y
    ; pop registers we pushed
    pop dx
    pop ax
    ret ; return
ENDp  find_next_bird_coords


proc CheckCollision
    ; ax will contain 0 if no collisions are found, 1 if the bird collided a wall and 2 if bird collided a spike.
    ; push registers
    push bx
    push cx
    push dx
    push di
    lea di, [bird_boarder_array_y] ; get array address of boarder
    ; get the right facing array for boarder
    cmp [bird_direction], 'r'
    jne facing_left
    lea bx, [bird_facing_right_boarder_array_x]
    jmp continue_checking_for_collisions
facing_left:
    lea bx, [bird_facing_left_boarder_array_x]
continue_checking_for_collisions:
    mov cx, 53 ; set loop counter to number of pixels on boarder
    mov ah, 0dh
pixel_loop:
    push cx
    mov cx, [bx] ; set x
    add cx, [bird_x]
    mov dx, [di] ; set y
    add dx, [bird_y]
    int 10h
    cmp al, 11
    je there_is_a_collision ; if pixel is light blue than the bird will collide with something
    add bx, 2 ; go to next index
    add di, 2
    pop cx
    loop pixel_loop
; if we got here than there was no collision so we can end the function
    xor ax, ax
    jmp EndCheckCollisions
there_is_a_collision:
    pop cx
    mov ax, [left_wall_place]
    cmp [bird_x], ax ; check if bird is at the left wall
    je bird_collided_wall
    mov ax, [right_wall_place]
    sub ax, 18
    cmp [bird_x], ax ; check if bird is at the right wall
    je bird_collided_wall
    ; if we got here than the bird collided with a spike
    mov ax, 2
    jmp EndCheckCollisions
bird_collided_wall:
    mov ax, 1
EndCheckCollisions:
    pop di
    pop dx
    pop cx
    pop bx
    ret
endp CheckCollision


proc CheckHighStreak
    ; check wall
    ; check first part
    mov [streak], 0
    mov [High_streak], 0
    mov cx, 14
    mov di, 1
wall_ran_1_check_loop:
    mov ax, [wall_ran1]
    and ax, di
    cmp ax, di ; if they are, then theres a one
    je no_zero_found1
    inc [streak]
    mov ax, [streak]
    cmp ax, [High_streak]
    ja update_high_streak1 ; if ax is larger than the high streak, update the high streak
    jmp end_of_high_streak_update1
update_high_streak1:
    mov [High_streak], ax
    jmp end_of_high_streak_update1
no_zero_found1:
    mov [streak], 0
end_of_high_streak_update1:
    shl di, 1
    loop wall_ran_1_check_loop
    ; check second part
    mov cx, 13
    mov di, 1
wall_ran_2_check_loop:
    mov ax, [wall_ran2]
    and ax, di
    cmp ax, di ; if they are, then theres a one
    je no_zero_found2
    inc [streak]
    mov ax, [streak]
    cmp ax, [High_streak]
    ja update_high_streak2 ; if ax is larger than the high streak, update the high streak
    jmp end_of_high_streak_update2
update_high_streak2:
    mov [High_streak], ax
    jmp end_of_high_streak_update2
no_zero_found2:
    mov [streak], 0
end_of_high_streak_update2:
    shl di, 1
    loop wall_ran_2_check_loop
    ret
endp CheckHighStreak


proc GenerateNewWallNumber
    ; first wall part
    xor bx, bx
    mov cx, 2
    mov ah, 2ch
first_num_loop:
    push cx
    shl bx, 8
    int 21h
    shl dl, 1
    mov bl, dl
    call WaitButShort
    int 21h
    add bl, dl
    pop cx
    loop first_num_loop
    xor bx, [wall_ran1_xor]
    ror [wall_ran1_xor], 3
    mov [wall_ran1], bx
    ; second wall part
    xor bx, bx
    mov cx, 2
    mov ah, 2ch
second_num_loop:
    push cx
    shl bx, 8
    int 21h
    shl dl, 1
    mov bl, dl
    call WaitButShort
    int 21h
    add bl, dl
    pop cx
    loop second_num_loop
    xor bx, [wall_ran2_xor]
    ror [wall_ran2_xor], 3
    mov [wall_ran2], bx
    ret
endp GenerateNewWallNumber


proc GenerateWall
    ; push the registers we'll use
    push ax
    push bx
    push cx
    push dx
    push di
generate_new_wall:
    call GenerateNewWallNumber
    ; here we have in the variable high_streak the highst streak of '0' found in the wall
    call CheckHighStreak
    mov ax, [High_streak]
    cmp ax, [min_streak]
    jb generate_new_wall ; if the high streak is less than the min, generate a new wall
    ; pop registers
    pop di
    pop dx
    pop cx
    pop bx
    pop ax
    ret ; return
ENDp  GenerateWall


proc PrintWallSpikes
    wall_x_pos equ [bp + 6]
    wall_side equ [byte ptr bp + 4]
    push bp
    mov bp, sp
    ; push the registers we'll use
    push ax
    push bx
    push cx
    push dx
    push di
    push si
    ; check side
    cmp wall_side, 'r'
    jne left_wall
    ; right wall
    lea bx, [spike_facing_left_array_x]
    jmp continue_printing_wall
left_wall:
    lea bx, [spike_facing_right_array_x]
continue_printing_wall:
    mov cx, 2
wall_loop:
    cmp cx, 2
    jne second_part
    ; first part
    push cx
    mov ax, [wall_ran1]
    mov cx, 14
    mov di, 6
    jmp spike_loop
second_part:
    push cx
    mov ax, [wall_ran2]
    mov cx, 13
    mov di, 104
    spike_loop:
        mov dx, ax
        and dx, 1
        cmp dx, 1 ; if true, then the bit is 1
        jne dont_print_spike
        push ax ; push something random so func doesnt go crazy
        push bx
        lea si, [spike_array_y]
        push si
        push [spike_color]
        push [spike_p_amount]
        push wall_x_pos
        push di
        call PrintArray ; push all parameters and print the spike
    dont_print_spike:
        add di, 7
        shr ax, 1
        loop spike_loop
    pop cx
    loop wall_loop
    pop si
    pop di
    pop dx
    pop cx
    pop bx
    pop ax
    pop bp
    ret 4
endp PrintWallSpikes


proc PrintArray
c_array_ad equ [bp + 16] ; array of colors ( maching the other arrays )
x_array_ad equ [bp + 14] ; array of x coordinates ( maching the other arrays )
y_array_ad equ [bp + 12] ; array of y coordinates ( maching the other arrays )
palette equ [byte ptr bp + 10] ; color palette: 0-15 will be single color and 16 will use the array
p_amount equ [bp + 8] ; amount of pixels
starting_x equ [bp + 6] ; top left corner x
starting_y equ [bp + 4] ; top left corner y
    ; set up
    push bp
    mov bp, sp
    ;push all registers
    push ax
    push bx
    push cx
    push dx
    push di
    xor di, di
    mov ah, 0ch ; set print command
    mov cx, p_amount ; set loop counter to amount of pixels
    cmp palette, 16
    jne print_single_color
    print_loop_multi_color:
        push cx ; push cx because we use it to print
        mov bx, x_array_ad
        add bx, di
        mov cx, [bx]
        add cx, starting_x ; get x
        mov bx, y_array_ad
        add bx, di
        mov dx, [bx]
        add dx, starting_y ; get y
        mov bx, c_array_ad
        add bx, di
        mov al, [byte ptr bx] ; get color
        int 10h ; print
        add di, 2 ; go to next index in the array
        pop cx ; pop cx back
        loop print_loop_multi_color ; loop
    jmp end_print_array
    print_single_color:
    mov al, palette ; set single color
    print_loop_single_color:
        push cx ; push cx because we use it to print
        mov bx, x_array_ad
        add bx, di
        mov cx, [bx]
        add cx, starting_x ; get x
        mov bx, y_array_ad
        add bx, di
        mov dx, [bx]
        add dx, starting_y ; get y
        int 10h ; print
        add di, 2 ; go to next index in the array
        pop cx ; pop cx back
        loop print_loop_single_color ; loop
    end_print_array:
    ; pop back all the registers
    pop di
    pop dx
    pop cx
    pop bx
    pop ax
    pop bp
    ret 14
endp PrintArray


proc PaintSquare
    color equ [bp + 12]
    top_left_x equ [bp + 10]
    top_left_y equ [bp + 8]
    buttom_right_x equ [bp + 6]
    buttom_right_y equ [bp + 4]
    ; push all registers
    push bp
    mov bp, sp
    push ax
    push bx
    push cx
    push dx
    mov ax, color ; set color
    mov ah, 0ch ; set print command 
    mov cx, buttom_right_x ; set cx to end of square
    x_loop:
        mov dx, buttom_right_y ; set dx to end of line
        y_loop:
            int 10h ; print on (cx, dx)
            dec dx
            cmp dx, 0ffffh
            je y_was_zero
            cmp dx, top_left_y
            jae y_loop
        y_was_zero:
        dec cx
        cmp cx, 0ffffh
        je x_was_zero
        cmp cx, top_left_x
        jae x_loop
x_was_zero:
    ; pop all registers back
    pop dx
    pop cx
    pop bx
    pop ax
    pop bp
    ret 10
endp PaintSquare


proc PrintBird
    ; ax is what is pushed in the palette var using PrintArray
    push offset bird_array_c
    cmp [bird_direction], 'r'
    jne take_facing_left1
    push offset bird_facing_right_array_x
    jmp continue_deleting_bird
take_facing_left1:
   push offset bird_facing_left_array_x
continue_deleting_bird:
    push offset bird_array_y
    push ax
    push [bird_p_amount]
    push [bird_x]
    push [bird_y]
    call PrintArray
    ret
endp PrintBird


proc UpdateSlope
    ; check if a key was pressed, and if yes, was it space? if it was then set slope to 14
    push ax
    mov ah, 01h
    int 16h
    jz EndUpdateSlope
    mov ah, 0h
    int 16h
    cmp al, 32
    jne EndUpdateSlope
    mov [slope], 14 ; if key was space then set bird slope to 14
EndUpdateSlope:
    pop ax
    ret
endp UpdateSlope


proc Waitgametick
    push ax
    push cx
    push dx
    mov ah, 2ch
    mov cx, [ticks_amount] ; amount of ticks
delay_loop:
    push cx
    int 21h
    mov dh, bh
tick_loop:
    int 21h
    cmp dh, bh
    je tick_loop
    pop cx
    loop delay_loop
    pop dx
    pop cx
    pop ax
    ret
endp Waitgametick


proc WaitButShort
    push ax
    push cx
    push dx
    mov ah, 2ch
    mov cx, 30 ; amount of ticks
delay_loop_short:
    push cx
    int 21h
    mov dh, bh
tick_loop_short:
    int 21h
    cmp dh, bh
    je tick_loop_short
    pop cx
    loop delay_loop_short
    pop dx
    pop cx
    pop ax
    ret
endp WaitButShort


proc PrintWalls
    ; push registers
    push ax
    push bx
    push cx
    push dx
    mov ah, 0ch ; set print command
    mov al, [byte ptr spike_color] ; set color ( spike color )
    ; left wall
    mov cx, [left_wall_place]
    mov bx, cx
    sub bx, 3
    left_wall_x_loop:
        mov dx, 199 ; set dx to end of line
        left_wall_y_loop:
            int 10h ; print on (cx, dx)
            dec dx
            cmp dx, -1
            jne left_wall_y_loop
        dec cx
        cmp cx, bx
        jne left_wall_x_loop
    ; right wall
    mov cx, [right_wall_place]
    mov bx, cx
    add bx, 3
    right_wall_x_loop:
        mov dx, 199 ; set dx to end of line
        right_wall_y_loop:
            int 10h ; print on (cx, dx)
            dec dx
            cmp dx, -1
            jne right_wall_y_loop
        inc cx
        cmp cx, bx
        jne right_wall_x_loop
		
    ; top ceiling
    mov cx, [right_wall_place]
    mov bx, [left_wall_place]
    top_cieling_x_loop:
        mov dx, 1 ; set dx to end of line
        top_cieling_y_loop:
            int 10h ; print on (cx, dx)
            dec dx
            cmp dx, -1
            jne top_cieling_y_loop
        dec cx
        cmp cx, bx
        jne top_cieling_x_loop
    ; floor
    mov cx, [right_wall_place]
    mov bx, [left_wall_place]
    floor_x_loop:
        mov dx, 199 ; set dx to end of line
        floor_y_loop:
            int 10h ; print on (cx, dx)
            dec dx
            cmp dx, 197
            jne floor_y_loop
        dec cx
        cmp cx, bx
        jne floor_x_loop
    ; pop registers
    pop dx
    pop cx
    pop bx
    pop ax
    ret
endp PrintWalls


proc ChangeBirdDirection
    push ax
    mov al, [bird_direction]
    cmp al, 'l'
    je switch_to_right
    mov [bird_direction], 'l'
    dec [bird_x]
    jmp end_of_change
switch_to_right:
    mov [bird_direction], 'r'
    inc [bird_x]
end_of_change:
    pop ax
    ret
endp ChangeBirdDirection


proc DeleteWallSpikes
    ; push all registers
    push ax
    push bx
    push cx
    push dx
    mov ah, 0ch ; set print command
    mov al, [byte ptr background_color] ; set color ( blue )
    cmp [bird_direction], 'r'
    jne del_left_wall
    ; right wall
    mov cx, [right_wall_place] ; set cx
    dec cx
    mov bx, cx
    sub bx, 6
    x_loop_right:
        mov dx, 196 ; set dx to end of line
        y_loop_right:
            int 10h ; print on (cx, dx)
            dec dx
            cmp dx, 2
            jne y_loop_right
        dec cx
        cmp cx, bx
        jne x_loop_right
    jmp EndDel
del_left_wall:
    ; left wall
    mov cx, [left_wall_place] ; set cx
    inc cx
    mov bx, cx
    add bx, 6
    x_loop_left:
        mov dx, 196 ; set dx to end of line
        y_loop_left:
            int 10h ; print on (cx, dx)
            dec dx
            cmp dx, 2
            jne y_loop_left
        inc cx
        cmp cx, bx
        jne x_loop_left
EndDel:
    ; pop all registers back
    pop dx
    pop cx
    pop bx
    pop ax
    ret
endp DeleteWallSpikes


proc CheckWallTimer
    dec [Timer]
    ; if timer has reached 0, print a new wall
    cmp [Timer], 0
    jne dont_print_new_wall
    call GenerateWall
    cmp [bird_direction], 'r' ; the bird is revese of the wall we are printing
    je print_left_wall
    push [spikes_place_right]
    push 'r'
    jmp finish_wall
print_left_wall:
    push [spikes_place_left]
    push 'l'
finish_wall:
    call PrintWallSpikes
dont_print_new_wall:
    ret
endp CheckWallTimer


proc BirdHitWall
    call DeleteWallSpikes ; delete the walls spikes
    mov [Timer], 9 ; start timer for replacing the wall
    call ChangeBirdDirection ; cahnge direction
    inc [score] ; increase score
    inc [score_digit]
    cmp [score_digit], 10
    jne dont_increase_tens
    mov [score_digit], 0
    inc [score_tens]
dont_increase_tens:
    ; if the score reached a new mark, increse difficulty
    cmp [score], 8
    je score_hit_new_mark
    cmp [score], 20
    je score_hit_new_mark
    cmp [score], 40
    je score_hit_new_mark
    jmp endbirdhitwall
score_hit_new_mark:
    dec [min_streak]
endbirdhitwall:
    push [background_color]
    push 143
    push 85
    push 185
    push 106
    call PaintSquare
    ret
endp BirdHitWall


proc LoadGame

    ; hide mouse
    mov ax, 0
    int 33h
	
	; reset keyboaard buffer
	mov ah,0ch
	mov al,0
	int 21h

    ; reset variables
    mov [bird_x], 156
    mov [bird_y], 90
    mov [bird_direction], 'r'
    mov [slope], 14
    mov [score], 0
    mov [score_digit], 0
    mov [score_tens], 0
	mov [min_streak], 7


    push 0 ; paint the background black
    push 0
    push 0
    push 319
    push 199
    call PaintSquare

    push [background_color]
    push [left_wall_place]
    push 0
    push [right_wall_place]
    push 199
    call PaintSquare

    call PrintWalls

    ; print first wall
    call GenerateWall
    push [spikes_place_right]
    push 'r'
    call PrintWallSpikes

    ; print second wall
    call GenerateWall
    push [spikes_place_left]
    push 'l'
    call PrintWallSpikes

    ; print initial score
    call PrintScore

    ; print bird in the middle
    mov ax, 16
    call PrintBird

    ret
endp LoadGame


proc CreateNumOffsetArrays
    push ax
    ; 0
    mov [nums_x_arrays_offset], offset num_0_x_array
    mov [nums_y_arrays_offset], offset num_0_y_array
    mov ax, [num_0_p_amount]
    mov [nums_p_amounts], ax
    ; 1
    mov [nums_x_arrays_offset + 2], offset num_1_x_array
    mov [nums_y_arrays_offset + 2], offset num_1_y_array
    mov ax, [num_1_p_amount]
    mov [nums_p_amounts + 2], ax
    ; 2
    mov [nums_x_arrays_offset + 4], offset num_2_x_array
    mov [nums_y_arrays_offset + 4], offset num_2_y_array
    mov ax, [num_2_p_amount]
    mov [nums_p_amounts + 4], ax
    ; 3
    mov [nums_x_arrays_offset + 6], offset num_3_x_array
    mov [nums_y_arrays_offset + 6], offset num_3_y_array
    mov ax, [num_3_p_amount]
    mov [nums_p_amounts + 6], ax
    ; 4
    mov [nums_x_arrays_offset + 8], offset num_4_x_array
    mov [nums_y_arrays_offset + 8], offset num_4_y_array
    mov ax, [num_4_p_amount]
    mov [nums_p_amounts + 8], ax
    ; 5
    mov [nums_x_arrays_offset + 10], offset num_5_x_array
    mov [nums_y_arrays_offset + 10], offset num_5_y_array
    mov ax, [num_5_p_amount]
    mov [nums_p_amounts + 10], ax
    ; 6
    mov [nums_x_arrays_offset + 12], offset num_6_x_array
    mov [nums_y_arrays_offset + 12], offset num_6_y_array
    mov ax, [num_6_p_amount]
    mov [nums_p_amounts + 12], ax
    ; 7
    mov [nums_x_arrays_offset + 14], offset num_7_x_array
    mov [nums_y_arrays_offset + 14], offset num_7_y_array
    mov ax, [num_7_p_amount]
    mov [nums_p_amounts + 14], ax
    ; 8
    mov [nums_x_arrays_offset + 16], offset num_8_x_array
    mov [nums_y_arrays_offset + 16], offset num_8_y_array
    mov ax, [num_8_p_amount]
    mov [nums_p_amounts + 16], ax
    ; 9
    mov [nums_x_arrays_offset + 18], offset num_9_x_array
    mov [nums_y_arrays_offset + 18], offset num_9_y_array
    mov ax, [num_9_p_amount]
    mov [nums_p_amounts + 18], ax
    pop ax
    ret
endp CreateNumOffsetArrays


proc PrintScore
    push ax
    push bx
    push cx
    push dx
    mov bl, [score_digit]
    xor bh, bh
    shl bx, 1
    push 0
    mov dx, [nums_x_arrays_offset + bx]
    push dx
    mov dx, [nums_y_arrays_offset + bx]
    push dx
    push 5
    mov dx, [nums_p_amounts + bx]
    push dx
    push 167
    push 85
    call PrintArray

    mov bl, [score_tens]
    xor bh, bh
    shl bx, 1
    push 0
    mov dx, [nums_x_arrays_offset + bx]
    push dx
    mov dx, [nums_y_arrays_offset + bx]
    push dx
    push 5
    mov dx, [nums_p_amounts + bx]
    push dx
    push 143
    push 85
    call PrintArray
    pop dx
    pop cx
    pop bx
    pop ax
    ret
endp PrintScore


proc HomeScreen
    ; background
    push [background_color]
    push 0
    push 0
    push 319
    push 199
    call PaintSquare

    ; start button
    push 2
    push 111
    push 100
    push 300
    push 179
    call PaintSquare

    ; exit button
    push 4
    push 10
    push 10
    push 30
    push 30
    call PaintSquare

    ; start text
    push 0
    push offset start_message_x_array
    push offset start_message_y_array
    push 15
    push 1184
    push 140
    push 126
    call PrintArray

    ; closing x draw
    push 0
    push offset close_x_array_x
    push offset close_x_array_y
    push 15
    push 81
    push 13
    push 13
    call PrintArray

    ; high text
    push 0
    push offset high_message_x_array
    push offset high_message_y_array
    push 15
    push 540
    push 19
    push 110
    call PrintArray

    ; title
    push 0
    push offset spikes_message_x_array
    push offset spikes_message_y_array
    push 15
    push 2200
    push 70
    push 25
    call PrintArray

    ; high score digit
    mov bl, [high_score_digit]
    xor bh, bh
    shl bx, 1
    push 0
    mov dx, [nums_x_arrays_offset + bx]
    push dx
    mov dx, [nums_y_arrays_offset + bx]
    push dx
    push 15
    mov dx, [nums_p_amounts + bx]
    push dx
    push 57
    push 145
    call PrintArray

    ; high score tens digit
    mov bl, [high_score_tens]
    xor bh, bh
    shl bx, 1
    push 0
    mov dx, [nums_x_arrays_offset + bx]
    push dx
    mov dx, [nums_y_arrays_offset + bx]
    push dx
    push 15
    mov dx, [nums_p_amounts + bx]
    push dx
    push 33
    push 145
    call PrintArray

    wait_for_click_loop:
    ; check if mouse is clicked
    mov ax, 1
    int 33h
    mov ax, 3
    int 33h
    cmp bx, 0
jz wait_for_click_loop
    shr cx, 1 ; check if curser on start
    push cx
    push dx
    push 111
    push 100
    push 179
    push 300
    call CheckIfInBox
    cmp ax, 1
je start_was_pressed
    push cx
    push dx
    push 10
    push 10
    push 30
    push 30
    call CheckIfInBox
    cmp ax, 1
je exit_was_pressed
    jmp wait_for_click_loop
start_was_pressed:
    xor ax, ax
    jmp end_home_screen
exit_was_pressed:
    mov ax, 1
end_home_screen:
    ret
endp HomeScreen


proc CheckIfInBox
    ; will retun in ax. 1 if in box, and 0 otherwise
    x equ [bp + 14]
    y equ [bp + 12]
    box_top_y equ [bp + 10]
    box_left_x equ [bp + 8]
    box_buttom_y equ [bp + 6]
    box_right_x equ [bp + 4]
    push bp
    mov bp, sp
    mov ax, x
    cmp ax, box_left_x
    jb not_in_box
    cmp ax, box_right_x
    ja not_in_box
    mov ax, y
    cmp ax, box_top_y
    jb not_in_box
    cmp ax, box_buttom_y
    ja not_in_box
    mov ax, 1
    jmp endCheckIfInBox
not_in_box:
    xor ax, ax
endCheckIfInBox:
    pop bp
    ret 12
endp CheckIfInBox


proc PlayGame
	
    ; wait for first press
wait_for_first_click_loop:
    mov ah, 01h
    int 16h
    jz wait_for_first_click_loop
    mov ah, 0h
    int 16h
    cmp al, 32
    jne wait_for_first_click_loop
game_loop:

    call UpdateSlope ; if keyboard pressed, update slope
 
    call CheckWallTimer ; if timer reached zero, print the wall

    ; delete bird
    mov ax, [background_color]
    call PrintBird

    ; find next place for bird
    call find_next_bird_coords

    ; check collisionsz
    call CheckCollision
    cmp ax, 1 ; if the bird collided a wall change direction and print new wall
    jne bird_didnt_hit_wall
    call BirdHitWall
bird_didnt_hit_wall:
    cmp ax, 2 ; if the bird collided a spike close the game
    je end_game

    ;print score
    call PrintScore

    ; print bird in new place
    mov ax, 16
    call PrintBird

    ; delay
    call Waitgametick

    ; next game loop
    jmp game_loop
end_game:
    ret
endp PlayGame


proc LosingScreen

    ; replace high score if needed
    mov al, [score]
    cmp al, [high_score]
    jb dont_replace_high_score
	mov [high_score], al
    mov al, [score_digit]
    mov [high_score_digit], al
    mov al, [score_tens]
    mov [high_score_tens], al
dont_replace_high_score:

    ; background
    push 12
    push 120
    push 60
    push 200
    push 140
    call PaintSquare

    ; exit button
    push 4
    push 123
    push 63
    push 143
    push 83
    call PaintSquare

    ; closing x draw
    push 0
    push offset close_x_array_x
    push offset close_x_array_y
    push 15
    push 81
    push 126
    push 66
    call PrintArray

    mov bl, [score_digit]
    xor bh, bh
    shl bx, 1
    push 0
    mov dx, [nums_x_arrays_offset + bx]
    push dx
    mov dx, [nums_y_arrays_offset + bx]
    push dx
    push 8
    mov dx, [nums_p_amounts + bx]
    push dx
    push 164
    push 93
    call PrintArray

    mov bl, [score_tens]
    xor bh, bh
    shl bx, 1
    push 0
    mov dx, [nums_x_arrays_offset + bx]
    push dx
    mov dx, [nums_y_arrays_offset + bx]
    push dx
    push 8
    mov dx, [nums_p_amounts + bx]
    push dx
    push 140
    push 93
    call PrintArray

    wait_for_click_loop_losing:
    ; check if mouse is clicked
    mov ax, 1
    int 33h
    mov ax, 3
    int 33h
    cmp bx, 0
jz wait_for_click_loop_losing
    shr cx, 1 ; check if curser on start
    push cx
    push dx
    push 63
    push 123
    push 93
    push 143
    call CheckIfInBox
    cmp ax, 1
jne wait_for_click_loop_losing
    mov ax , 0
    int 33h
    ret
endp LosingScreen











start:
mov ax, @data
mov ds, ax
    xor ax, ax
    ; graphics mode
    mov ax, 13h
    int 10h

    call CreateNumOffsetArrays ; set the arrays for later use

Home_Screen:
    call HomeScreen
    cmp ax, 1
    je exit ; if the 'x' was pressed, exit

    call LoadGame

    call PlayGame

    call LosingScreen

    jmp Home_Screen

exit:

	mov ax, 0 ; delete mouse
	int 33h
	push 0 ; delete the screen
	push 0
	push 0
	push 319
	push 199
	call PaintSquare

	mov ax, 4c00h
	int 21h
END start
